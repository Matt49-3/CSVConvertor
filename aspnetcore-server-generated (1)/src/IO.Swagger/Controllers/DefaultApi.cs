/*
 * CSV Convertor
 *
 * This API will save the world!
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Mime;
using System.Threading.Tasks;
using IO.Swagger.Attributes;
using IO.Swagger.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Primitives;
using System.Net.Http;
using System.Text;
using CsvHelper;
using CsvHelper.Configuration;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    {
        private readonly ICsvConvertor _csvConvertor;
        
        public DefaultApiController(ICsvConvertor csvConvertor)
        {
            _csvConvertor = csvConvertor;
        }

        
        /// <summary>
        /// Convert the CSV file into JSON or XML
        /// </summary>
        
        /// <param name="csvUri"></param>
        /// <response code="200">The transformation result</response>
        /// <response code="400">The CSV is badly formatted</response>
        /// <response code="0">Internal server error</response>
        [HttpGet]
        [Route("/convertor")]
        [ValidateModelState]
        [SwaggerOperation("Convert")]
        [Produces("application/json","text/xml")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IDictionary<string, Object>>), description: "The transformation result")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "The CSV is badly formatted")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Internal server error")]
        public async virtual IAsyncEnumerable<IDictionary<string, Object>> Convert([FromQuery][Required()]string csvUri,string separator=";")
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Dictionary<string, Object>>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            /*IResultBuilder resultBuilder = null;
            StringValues acceptHeaderValues ;
            this.Request.Headers.TryGetValue("Accept",out acceptHeaderValues);

            if (acceptHeaderValues.Contains(System.Net.Mime.MediaTypeNames.Application.Json))
                
            else if (acceptHeaderValues.Contains(System.Net.Mime.MediaTypeNames.Text.Xml))
            */

            await foreach (var item in _csvConvertor.Convert(csvUri))
          {
              yield return item;
          }

        }
    }
}
